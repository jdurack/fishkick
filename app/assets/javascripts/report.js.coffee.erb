# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

#= require jsapi.min
#= require readmore.min

window.FK || = {}
window.FK.svgns = "http://www.w3.org/2000/svg"

window.FK.init = () ->
  google.load 'visualization', '1.0', {'packages':['corechart']}
  window.FK.setOverlayImages()
  window.FK.initializeSiteMap()
  window.FK.setReadMore()
  $('#addReportCommentModal').on 'shown.bs.modal', window.FK.addReportCommentModalShown
  $('#addReportCommentSaveButton').on 'click', window.FK.addReportCommentSave


window.FK.addReportCommentModalShown = () ->
  $('#addReportCommentComment').focus()


window.FK.addReportCommentSave = () ->
  comment = $('#addReportCommentComment').val()
  siteId = $('#addReportCommentSiteId').val()

  data =
    report_comment:
      comment: comment
      site_id: siteId

  path = "<%= Rails.application.routes.url_helpers.report_comments_path %>"
  $.post path, data, (response) ->
    location.reload()


window.FK.setOverlayImages = () ->
  $('.overlayImage').each (index, overlayImageDiv) ->
    overlayImage = $(overlayImageDiv)
    image = overlayImage.attr 'data-image'
    currentBackgroundImage = overlayImage.css 'background-image'
    newBackgroundImage = currentBackgroundImage + ", url('" + image + "')"
    overlayImage.css 'background-image', newBackgroundImage


window.FK.setReadMore = () ->
  $('#siteDescription').readmore
    speed: 300
    maxHeight: 510
    moreLink: '<div class="btn btn-default">read more</div>'
    lessLink: '<div class="btn btn-default">close</div>'


window.FK.initializeSiteMap = () ->

  mapOptions =
    mapTypeId: google.maps.MapTypeId.TERRAIN
    streetViewControl: false
    draggable: true
    #zoom: window.FK.mapZoomLevel
    #center: new google.maps.LatLng window.FK.mapCenterLatitude, window.FK.mapCenterLongitude

  map = new google.maps.Map document.getElementById('siteMap'), mapOptions
  bounds = new google.maps.LatLngBounds()

  if siteIsLake and ( mapLineData.length > 0 )
    # Construct the polygon.
    polygon = new google.maps.Polygon
      paths: mapLineData[0]
      strokeColor: '#26569E'
      strokeOpacity: 0.8
      strokeWeight: 0
      fillColor: '#26569E'
      fillOpacity: 0.8
    for mapPoint in mapLineData[0]
        bounds.extend mapPoint

    polygon.setMap map

  else #stream
    for lineData in mapLineData
      polyLine = new google.maps.Polyline
        path: lineData
        geodesic: true
        strokeColor: '#26569E'
        strokeOpacity: 1.0
        strokeWeight: 4

      polyLine.setMap map
      for mapPoint in lineData
        bounds.extend mapPoint

  map.fitBounds bounds


window.FK.drawUSGSDataChart = () ->

  lineWidth = 6
  noData = false
  if window.FK.usgsChartData.length == 1
    window.FK.usgsChartData.push [new Date(), 0.0]
    noData = true
    lineWidth = 0

  data = google.visualization.arrayToDataTable window.FK.usgsChartData
    
  options =
    #title: window.FK.usgsChartTitle
    curveType: 'function'
    legend:
      position: 'none'
    backgroundColor:
      fill:'transparent'
    hAxis: 
      ticks: window.FK.usgsChartDataTicks
      gridlines:
        color: 'transparent'
      baselineColor: '#aaaaaa'
      slantedText: false
      maxAlternation: 1
    vAxis:
      gridlines:
          color: 'transparent'
      baselineColor: '#aaaaaa'
      minValue: 0
    lineWidth: lineWidth
    colors: ['#2a5d5d']
    fontName: 'Lato'
    fontSize: '14'
    height: 200
      
  chartElement = document.getElementById 'usgsDataChart'
  chart = new google.visualization.LineChart chartElement
  chart.draw data, options

  if noData
    window.FK.drawUSGSDataChartNoData()
  else
    if window.FK.usgsChartMinStreamFlow or window.FK.usgsChartMaxStreamFlow
      window.FK.drawUSGSDataChartMinMaxStreamFlow chart


window.FK.drawUSGSDataChartNoData = () ->
  noDataText = document.createElementNS window.FK.svgns, "text"
  noDataText.setAttributeNS null,"x", 100
  noDataText.setAttributeNS null,"y", 75
  noDataTextNode = document.createTextNode "(no USGS stream flow data available)"
  noDataText.appendChild noDataTextNode
  $('#usgsDataChart svg').append noDataText


window.FK.drawUSGSDataChartMinMaxStreamFlow = (chart) ->
  cli = chart.getChartLayoutInterface()
  boundingBox = cli.getChartAreaBoundingBox()

  hasTooLowBox = false
  hasGoodBox = false
  hasTooHighBox = false
  tooLowY = null
  tooHighY = null

  if window.FK.usgsChartMinStreamFlow
    tooLowY = cli.getYLocation window.FK.usgsChartMinStreamFlow
    hasTooLowBox = true
    if tooLowY > boundingBox.top
      hasGoodBox = true
  if window.FK.usgsChartMaxStreamFlow
    tooHighY = cli.getYLocation window.FK.usgsChartMaxStreamFlow
    hasGoodBox = true
    if tooHighY > boundingBox.top
      hasTooHighBox = true
  

  if hasTooLowBox
    # draw 'too low' box...
    boxStartY = boundingBox.top
    boxHeight = boundingBox.height
    if hasGoodBox
      boxStartY = tooLowY
      boxHeight = boundingBox.height - ( tooLowY - boundingBox.top )
    window.FK.drawUSGSDataChartBox boundingBox, false, boxStartY, boxHeight
    window.FK.drawUSGSDataChartBoxLabel boundingBox, false, 'too low', boxStartY, boxHeight


  if hasGoodBox
    # draw 'good' box...
    boxStartY = 0
    boxHeight = 0

    if hasTooLowBox
      if hasTooHighBox
        boxStartY = tooHighY
        boxHeight = tooLowY - tooHighY
      else
        boxStartY = boundingBox.top
        boxHeight = tooLowY - boundingBox.top
    else
      if hasTooHighBox
        boxStartY = tooHighY
        boxHeight = boundingBox.height - ( tooHighY - boundingBox.top )
      else
        boxStartY = boundingBox.top
        boxHeight = boundingBox.height

    window.FK.drawUSGSDataChartBox boundingBox, true, boxStartY, boxHeight
    window.FK.drawUSGSDataChartBoxLabel boundingBox, true, 'good', boxStartY, boxHeight


  if hasTooHighBox
    # draw 'too high' box...
    boxStartY = boundingBox.top
    boxHeight = tooHighY - boundingBox.top

    window.FK.drawUSGSDataChartBox boundingBox, false, boxStartY, boxHeight
    window.FK.drawUSGSDataChartBoxLabel boundingBox, false, 'too high', boxStartY, boxHeight


window.FK.drawUSGSDataChartBoxLabel = (boundingBox, isGood, text, boxStartY, boxHeight) ->
  textElement = document.createElementNS window.FK.svgns, "text"
  textX = boundingBox.left + boundingBox.width + 2
  textY = boxStartY + ( boxHeight / 2 ) + 5

  textElement.setAttributeNS null,"x", textX
  textElement.setAttributeNS null,"y", textY
  classNames = 'usgsDataChartRangeText'
  if isGood
    classNames += ' good'
  else
    classNames += ' bad'
  textElement.setAttribute 'class', classNames
  textElementNode = document.createTextNode text
  textElement.appendChild textElementNode
  $('#usgsDataChart svg').prepend textElement


window.FK.drawUSGSDataChartBox = (boundingBox, isGood, startY, height) ->
  rect = document.createElementNS window.FK.svgns, 'rect'
  if isGood
    rect.setAttribute 'class', 'streamFlowGoodRect'
  else
    rect.setAttribute 'class', 'streamFlowBadRect'

  rect.setAttribute 'x', boundingBox.left
  rect.setAttribute 'width', boundingBox.width

  rect.setAttribute 'y', startY
  rect.setAttribute 'height', height

  $('#usgsDataChart svg').prepend rect


window.FK.drawWeatherDataChart = () ->

  data = google.visualization.arrayToDataTable window.FK.weatherChartData

  options =
    #title: window.FK.weatherChartTitle
    #curveType: 'function'
    legend:
      position: 'none'
    backgroundColor:
      fill:'transparent'
    hAxis: 
      ticks: window.FK.weatherChartDataTicks
      gridlines:
          color: 'transparent'
      baselineColor: '#aaaaaa'
      slantedText: false
      maxAlternation: 1
    vAxis:
      gridlines:
          color: 'transparent'
      baselineColor: '#aaaaaa'
      viewWindow:
        min: 0.0
    lineWidth: 6
    colors: ['#2a5d5d']
    fontName: 'Lato'
    fontSize: '14'
    height: 200


  chart = new google.visualization.LineChart document.getElementById 'weatherDataChart'
  chart.draw data, options
  window.FK.drawWeatherDataChartLineActualAndForecast chart


window.FK.drawWeatherDataChartLineActualAndForecast = (chart) ->
  newLine = document.createElementNS window.FK.svgns, 'line'
  newLine.setAttribute 'id', 'lineId'
  newLine.setAttribute 'class', 'weatherDataChartDividingLine'

  xValue = new Date()
  xLocation = chart.getChartLayoutInterface().getXLocation xValue

  newLine.setAttribute 'x1', xLocation
  newLine.setAttribute 'y1', chart.getChartLayoutInterface().getChartAreaBoundingBox().top
  newLine.setAttribute 'x2', xLocation
  newLine.setAttribute 'y2', chart.getChartLayoutInterface().getChartAreaBoundingBox().height + chart.getChartLayoutInterface().getChartAreaBoundingBox().top
  $('#weatherDataChart svg').prepend newLine

  actualText = document.createElementNS window.FK.svgns, "text"
  actualText.setAttributeNS null,"x", xLocation - 70
  actualText.setAttributeNS null,"y", 50
  actualText.setAttribute 'class', 'weatherDataChartDividingLineText'
  actualTextNode = document.createTextNode "actual"
  actualText.appendChild actualTextNode
  $('#weatherDataChart svg').append actualText

  forecastText = document.createElementNS window.FK.svgns, "text"
  forecastText.setAttributeNS null,"x", xLocation + 20
  forecastText.setAttributeNS null,"y", 50
  forecastText.setAttribute 'class', 'weatherDataChartDividingLineText'
  forecastTextNode = document.createTextNode "forecast"
  forecastText.appendChild forecastTextNode
  $('#weatherDataChart svg').append forecastText